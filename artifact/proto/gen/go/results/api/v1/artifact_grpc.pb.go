// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: results/api/v1/artifact.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ArtifactService_CreateArtifact_FullMethodName   = "/github.actions.results.api.v1.ArtifactService/CreateArtifact"
	ArtifactService_FinalizeArtifact_FullMethodName = "/github.actions.results.api.v1.ArtifactService/FinalizeArtifact"
)

// ArtifactServiceClient is the client API for ArtifactService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArtifactServiceClient interface {
	CreateArtifact(ctx context.Context, in *CreateArtifactRequest, opts ...grpc.CallOption) (*CreateArtifactResponse, error)
	FinalizeArtifact(ctx context.Context, in *FinalizeArtifactRequest, opts ...grpc.CallOption) (*FinalizeArtifactResponse, error)
}

type artifactServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArtifactServiceClient(cc grpc.ClientConnInterface) ArtifactServiceClient {
	return &artifactServiceClient{cc}
}

func (c *artifactServiceClient) CreateArtifact(ctx context.Context, in *CreateArtifactRequest, opts ...grpc.CallOption) (*CreateArtifactResponse, error) {
	out := new(CreateArtifactResponse)
	err := c.cc.Invoke(ctx, ArtifactService_CreateArtifact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactServiceClient) FinalizeArtifact(ctx context.Context, in *FinalizeArtifactRequest, opts ...grpc.CallOption) (*FinalizeArtifactResponse, error) {
	out := new(FinalizeArtifactResponse)
	err := c.cc.Invoke(ctx, ArtifactService_FinalizeArtifact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArtifactServiceServer is the server API for ArtifactService service.
// All implementations must embed UnimplementedArtifactServiceServer
// for forward compatibility
type ArtifactServiceServer interface {
	CreateArtifact(context.Context, *CreateArtifactRequest) (*CreateArtifactResponse, error)
	FinalizeArtifact(context.Context, *FinalizeArtifactRequest) (*FinalizeArtifactResponse, error)
	mustEmbedUnimplementedArtifactServiceServer()
}

// UnimplementedArtifactServiceServer must be embedded to have forward compatible implementations.
type UnimplementedArtifactServiceServer struct {
}

func (UnimplementedArtifactServiceServer) CreateArtifact(context.Context, *CreateArtifactRequest) (*CreateArtifactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArtifact not implemented")
}
func (UnimplementedArtifactServiceServer) FinalizeArtifact(context.Context, *FinalizeArtifactRequest) (*FinalizeArtifactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeArtifact not implemented")
}
func (UnimplementedArtifactServiceServer) mustEmbedUnimplementedArtifactServiceServer() {}

// UnsafeArtifactServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArtifactServiceServer will
// result in compilation errors.
type UnsafeArtifactServiceServer interface {
	mustEmbedUnimplementedArtifactServiceServer()
}

func RegisterArtifactServiceServer(s grpc.ServiceRegistrar, srv ArtifactServiceServer) {
	s.RegisterService(&ArtifactService_ServiceDesc, srv)
}

func _ArtifactService_CreateArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactServiceServer).CreateArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactService_CreateArtifact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactServiceServer).CreateArtifact(ctx, req.(*CreateArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArtifactService_FinalizeArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactServiceServer).FinalizeArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArtifactService_FinalizeArtifact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactServiceServer).FinalizeArtifact(ctx, req.(*FinalizeArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ArtifactService_ServiceDesc is the grpc.ServiceDesc for ArtifactService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArtifactService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "github.actions.results.api.v1.ArtifactService",
	HandlerType: (*ArtifactServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateArtifact",
			Handler:    _ArtifactService_CreateArtifact_Handler,
		},
		{
			MethodName: "FinalizeArtifact",
			Handler:    _ArtifactService_FinalizeArtifact_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "results/api/v1/artifact.proto",
}
