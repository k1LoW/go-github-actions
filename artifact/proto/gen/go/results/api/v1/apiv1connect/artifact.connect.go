// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: results/api/v1/artifact.proto

package apiv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/k1LoW/go-github-actions/artifact/proto/gen/go/results/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ArtifactServiceName is the fully-qualified name of the ArtifactService service.
	ArtifactServiceName = "github.actions.results.api.v1.ArtifactService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ArtifactServiceCreateArtifactProcedure is the fully-qualified name of the ArtifactService's
	// CreateArtifact RPC.
	ArtifactServiceCreateArtifactProcedure = "/github.actions.results.api.v1.ArtifactService/CreateArtifact"
	// ArtifactServiceFinalizeArtifactProcedure is the fully-qualified name of the ArtifactService's
	// FinalizeArtifact RPC.
	ArtifactServiceFinalizeArtifactProcedure = "/github.actions.results.api.v1.ArtifactService/FinalizeArtifact"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	artifactServiceServiceDescriptor                = v1.File_results_api_v1_artifact_proto.Services().ByName("ArtifactService")
	artifactServiceCreateArtifactMethodDescriptor   = artifactServiceServiceDescriptor.Methods().ByName("CreateArtifact")
	artifactServiceFinalizeArtifactMethodDescriptor = artifactServiceServiceDescriptor.Methods().ByName("FinalizeArtifact")
)

// ArtifactServiceClient is a client for the github.actions.results.api.v1.ArtifactService service.
type ArtifactServiceClient interface {
	CreateArtifact(context.Context, *connect.Request[v1.CreateArtifactRequest]) (*connect.Response[v1.CreateArtifactResponse], error)
	FinalizeArtifact(context.Context, *connect.Request[v1.FinalizeArtifactRequest]) (*connect.Response[v1.FinalizeArtifactResponse], error)
}

// NewArtifactServiceClient constructs a client for the
// github.actions.results.api.v1.ArtifactService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewArtifactServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ArtifactServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &artifactServiceClient{
		createArtifact: connect.NewClient[v1.CreateArtifactRequest, v1.CreateArtifactResponse](
			httpClient,
			baseURL+ArtifactServiceCreateArtifactProcedure,
			connect.WithSchema(artifactServiceCreateArtifactMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		finalizeArtifact: connect.NewClient[v1.FinalizeArtifactRequest, v1.FinalizeArtifactResponse](
			httpClient,
			baseURL+ArtifactServiceFinalizeArtifactProcedure,
			connect.WithSchema(artifactServiceFinalizeArtifactMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// artifactServiceClient implements ArtifactServiceClient.
type artifactServiceClient struct {
	createArtifact   *connect.Client[v1.CreateArtifactRequest, v1.CreateArtifactResponse]
	finalizeArtifact *connect.Client[v1.FinalizeArtifactRequest, v1.FinalizeArtifactResponse]
}

// CreateArtifact calls github.actions.results.api.v1.ArtifactService.CreateArtifact.
func (c *artifactServiceClient) CreateArtifact(ctx context.Context, req *connect.Request[v1.CreateArtifactRequest]) (*connect.Response[v1.CreateArtifactResponse], error) {
	return c.createArtifact.CallUnary(ctx, req)
}

// FinalizeArtifact calls github.actions.results.api.v1.ArtifactService.FinalizeArtifact.
func (c *artifactServiceClient) FinalizeArtifact(ctx context.Context, req *connect.Request[v1.FinalizeArtifactRequest]) (*connect.Response[v1.FinalizeArtifactResponse], error) {
	return c.finalizeArtifact.CallUnary(ctx, req)
}

// ArtifactServiceHandler is an implementation of the github.actions.results.api.v1.ArtifactService
// service.
type ArtifactServiceHandler interface {
	CreateArtifact(context.Context, *connect.Request[v1.CreateArtifactRequest]) (*connect.Response[v1.CreateArtifactResponse], error)
	FinalizeArtifact(context.Context, *connect.Request[v1.FinalizeArtifactRequest]) (*connect.Response[v1.FinalizeArtifactResponse], error)
}

// NewArtifactServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewArtifactServiceHandler(svc ArtifactServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	artifactServiceCreateArtifactHandler := connect.NewUnaryHandler(
		ArtifactServiceCreateArtifactProcedure,
		svc.CreateArtifact,
		connect.WithSchema(artifactServiceCreateArtifactMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	artifactServiceFinalizeArtifactHandler := connect.NewUnaryHandler(
		ArtifactServiceFinalizeArtifactProcedure,
		svc.FinalizeArtifact,
		connect.WithSchema(artifactServiceFinalizeArtifactMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/github.actions.results.api.v1.ArtifactService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ArtifactServiceCreateArtifactProcedure:
			artifactServiceCreateArtifactHandler.ServeHTTP(w, r)
		case ArtifactServiceFinalizeArtifactProcedure:
			artifactServiceFinalizeArtifactHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedArtifactServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedArtifactServiceHandler struct{}

func (UnimplementedArtifactServiceHandler) CreateArtifact(context.Context, *connect.Request[v1.CreateArtifactRequest]) (*connect.Response[v1.CreateArtifactResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("github.actions.results.api.v1.ArtifactService.CreateArtifact is not implemented"))
}

func (UnimplementedArtifactServiceHandler) FinalizeArtifact(context.Context, *connect.Request[v1.FinalizeArtifactRequest]) (*connect.Response[v1.FinalizeArtifactResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("github.actions.results.api.v1.ArtifactService.FinalizeArtifact is not implemented"))
}
